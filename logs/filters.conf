#===============================================================================
filter {
    #---------------------------------------------------------------------------
    # Parse & tag generic openstack log message
    grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:os_timestamp} %{POSINT:os_program_pid} %{AUDITLOGLEVEL:os_level} %{PROG:os_program}" }
        add_tag => [ "openstack-generic" ]
        break_on_match => false
        tag_on_failure => []
    }
    #---------------------------------------------------------------------------
    # Parse & tag multiline logs where subsequent lines are added to the original, previous line
    multiline {
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }
    #---------------------------------------------------------------------------
    # Parse & tag specific openstack project log messages
    if "openstack-generic" in [tags] {
        #-----------------------------------------------------------------------
        # Parse & tag generic nova logs
        # i.e.:
        # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [-] (11093) accepted ('192.168.1.100', 53437)
        # 2) nova-compute.log: nova.compute.resource_tracker [-] Auditing locally available compute resources
        grok {
            match => ["os_program", "nova.%{GREEDYDATA:os_program_path}"]
            add_tag => [ "nova-generic" ]
            break_on_match => false
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag generic keystoneclient logs (as used by nova)
        # i.e.:
        # 1) nova-api-os-compute.log: keystoneclient.middleware.auth_token [-] Using /tmp/keystone-signing-FI3PTe as cache directory for signing certificate
        grok {
            match => ["os_program", "keystoneclient.%{GREEDYDATA:os_program_path}"]
            add_tag => [ "keystoneclient-generic" ]
            break_on_match => false
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag generic keystone logs
        # i.e.:
        # 1) keystone.log: keystone.common.controller [-] RBAC: Bypassing authorization
        # 2) keystone.log: keystone-all [-] Configuration options gathered from: log_opt_values /usr/lib/python2.7/dist-packages/oslo/config/cfg.py:1929
        grok {
            match => ["os_program", "keystone[.-]%{GREEDYDATA:os_program_path}"]
            add_tag => [ "keystone-generic" ]
            break_on_match => false
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag generic routes logs (as used by keystone & nova)
        # i.e.:
        # 1) keystone.log: routes.middleware [-] Initialized with method overriding = True, and path info altering = True __init__ /usr/lib/python2.7/dist-packages/routes/middleware.py:41
        # 2) keystone.log: routes.middleware [-] Matched GET /tenants __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        grok {
            match => ["os_program", "routes[.-]%{GREEDYDATA:os_program_path}"]
            add_tag => [ "routes-generic" ]
            break_on_match => false
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag generic sqlalchemy logs (as used by keystone)
        # i.e.:
        # 1) keystone.log: 2014-06-10 13:41:24.789 18755 INFO sqlalchemy.engine.base.Engine [-] ('default',)
        grok {
            match => ["os_program", "sqlalchemy.%{GREEDYDATA:os_program_path}"]
            add_tag => [ "sqlalchemy-generic" ]
            break_on_match => false
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag generic cinder logs
        # i.e.:
        # 1) cinder.log: 2014-06-11 16:00:30.546 4131 INFO cinder.api.openstack.wsgi [-] http://10.127.26.62:8776/ returned with HTTP 200
        grok {
            match => ["os_program", "cinder.%{GREEDYDATA:os_program_path}"]
            add_tag => [ "cinder-generic" ]
            break_on_match => false
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
    }
    #---------------------------------------------------------------------------
    # Parse & tag nova logs
    if "nova-generic" in [tags] {
        #-----------------------------------------------------------------------
        # Parse & tag nova request-id's
        # i.e.:
        # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-264fe290-42c6-4252-9a87-c20685d360f1 23101739b41842babf322615686cdbf9 d6a76ef3d2a54fbbbdcf7694e4900c5d] 192.168.1.100 "GET /v2/d6a76ef3d2a54fbbbdcf7694e4900c5d/flavors/detail HTTP/1.1" status: 200 len: 2273 time: 0.1098659
        grok {
            match => ["message", "\[req-%{UUID:request_id} %{WORD:request_user_id} %{WORD:request_tenant_id}\] %{GREEDYDATA:message}"]
            add_tag => [ "nova-request-id" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag nova HTTP GET requests
        # i.e.:
        # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-264fe290-42c6-4252-9a87-c20685d360f1 23101739b41842babf322615686cdbf9 d6a76ef3d2a54fbbbdcf7694e4900c5d] 192.168.1.100 "GET /v2/d6a76ef3d2a54fbbbdcf7694e4900c5d/flavors/detail HTTP/1.1" status: 200 len: 2273 time: 0.1098659
        grok {
            match => [
                "message", "GET (/v%{NUMBER:api_version})?/%{WORD:tenant_id}/%{DATA:api_func}(/%{DATA:api_func_path})? %{GREEDYDATA:message}"
                ]
            add_tag => [ "nova-get-request" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag nova HTTP POST requests
        # i.e.:
        # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-1020ef31-7c3f-4ae9-a156-d04cbff43026 44aecbd3d6e34b90a8c2028c5352175b e8ca4ebd592b4e20861c5a06813d3c78] 192.168.1.100 "POST /v2/e8ca4ebd592b4e20861c5a06813d3c78/servers HTTP/1.1" status: 202 len: 739 time: 0.6813190
        grok {
            match => [
                "message", "POST (/v%{NUMBER:api_version})?/%{WORD:tenant_id}/%{DATA:api_func}(/%{DATA:api_func_path})? %{GREEDYDATA:message}" 
                ]
            add_tag => [ "nova-post-request" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag nova HTTP info from GET & POST requests
        if "nova-get-request" in [tags] or "nova-post-request" in [tags] {
            #-------------------------------------------------------------------
            # Generic HTTP info i.e.:
            # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-264fe290-42c6-4252-9a87-c20685d360f1 23101739b41842babf322615686cdbf9 d6a76ef3d2a54fbbbdcf7694e4900c5d] 192.168.1.100 "GET /v2/d6a76ef3d2a54fbbbdcf7694e4900c5d/flavors/detail HTTP/1.1" status: 200 len: 2273 time: 0.1098659
            # 2) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-1020ef31-7c3f-4ae9-a156-d04cbff43026 44aecbd3d6e34b90a8c2028c5352175b e8ca4ebd592b4e20861c5a06813d3c78] 192.168.1.100 "POST /v2/e8ca4ebd592b4e20861c5a06813d3c78/servers HTTP/1.1" status: 202 len: 739 time: 0.6813190
            grok {
                match => [
                    "message", 'HTTP/%{NUMBER:httpversion}\" status: %{NUMBER:response} len: %{NUMBER:bytes} time: %{NUMBER:httptime}' 
                    ]
                add_tag => [ "nova-http-request" ]
                remove_field => ["message"]
                break_on_match => false
                tag_on_failure => []
            }
            #-------------------------------------------------------------------
        }
        #-----------------------------------------------------------------------
    }
    #---------------------------------------------------------------------------
    # Parse & tag routes logs (as used by keystone & nova)
    if "routes-generic" in [tags] {
        #-----------------------------------------------------------------------
        # routes GET requests i.e.:
        # 1) keystone.log: Matched GET /tenants __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        # 2) keystone.log: Matched GET /users __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        # 3) keystone.log: Matched GET /tenants/47942f2dc60d4b88804b8573c0e78d7e/users __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        # 4) keystone.log: Matched GET /tenants/47942f2dc60d4b88804b8573c0e78d7e/users/29f569a2066745659b4fb080ff3b5a67/roles # __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        # 5) keystone.log: Matched GET /users/965fbe7ab90d4b1b912f85d4eb34d1cd/credentials/OS-EC2 __call__ # # /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        grok {
            match => [
                "message", "GET /%{DATA:api_func}(/%{DATA:api_func_path})? %{GREEDYDATA:message}"
                ]
            add_tag => [ "routes-get-request" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        if "routes-get-request" in [tags] {
            #-------------------------------------------------------------------
            # Tenants GET requests i.e.:
            # 1) keystone.log: Matched GET /tenants/47942f2dc60d4b88804b8573c0e78d7e/users __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
            # 2) keystone.log: Matched GET /tenants/47942f2dc60d4b88804b8573c0e78d7e/users/29f569a2066745659b4fb080ff3b5a67/roles # __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
            if [api_func] == "tenants" {
                grok {
                    match => [
                        "api_func_path", "%{WORD:tenant_id}/%{WORD:tenant_func}(/%{WORD:user_id}/%{WORD:user_func})?"
                        ]
                        add_tag => [ "routes-tenants-get-request" ]
                        break_on_match => false
                        remove_field => ["api_func_path"]
                        tag_on_failure => []
                }
            }
            #-------------------------------------------------------------------
            # Users GET requests i.e.:
            # 1) Matched GET /users/965fbe7ab90d4b1b912f85d4eb34d1cd/credentials/OS-EC2 __call__ # # /usr/lib/python2.7/dist-packages/routes/middleware.py:100
            if [api_func] == "users" {
                grok {
                    match => [
                        "api_func_path", "%{WORD:user_id}/%{WORD:user_func}(/%{PROG:user_func_detail})?"
                        ]
                        add_tag => [ "routes-users-get-request" ]
                        break_on_match => false
                        remove_field => ["api_func_path"]
                        tag_on_failure => []
                }
            }
            #-------------------------------------------------------------------
        }
        #-----------------------------------------------------------------------
        # Parse & tag routes POST requests
        #-----------------------------------------------------------------------
        # routes POSTS requests i.e.:
        # 1) routes.middleware [-] Matched POST /tokens __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        grok {
            match => [
                "message", "POST /%{DATA:api_func} %{GREEDYDATA:message}"
                ]
            add_tag => [ "routes-post-request" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
    }
    #---------------------------------------------------------------------------
    # Parse & tag generic sqlalchemy logs (as used by keystone)
    if "sqlalchemy-generic" in [tags] {
        #-----------------------------------------------------------------------
        grok {
            match => [
                "message", "('%{WORD:sqlalchemy_id}', %{DATA:expires}, '%{DATA:extra}', %{NUMBER:valid}, '%{WORD:user_id}', (')?%{WORD:trust_id}(')?)"
                ]
            add_tag => [ "sqlalchemy-issued-token" ]
            break_on_match => false
            remove_field => ["message"]
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag json from 'extra' field in sqlalchemy-issued-token
        if "sqlalchemy-issued-token" in [tags] {
            json {
                source => "extra"
                add_tag => "token-extra-json"
            }
        }
        #-----------------------------------------------------------------------
    }
    #---------------------------------------------------------------------------
    # Parse & tag generic logs (as used by keystone)
    if "openstack-generic" in [tags] {
        #-----------------------------------------------------------------------
        # Generic Apache log (primarily GET/POST requests as seen in keystone)
        # i.e.:
        # 1) 192.168.1.100 - - [10/Jun/2014:11:43:14 +0000] "POST http://192.168.1.100:5000/v2.0/tokens HTTP/1.0" 200 8374
        grok {
            match => [
                "message", "%{COMMONAPACHELOG}"
                ]
            add_tag => [ "generic-apache-request" ]
            break_on_match => false
            remove_field => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
    }
    #---------------------------------------------------------------------------
    # Parse & tag cinder logs
    if "cinder-generic" in [tags] {
        #-----------------------------------------------------------------------
        # Parse & tag cinder request-id's
        # i.e.:
        # 1) 2014-06-11 16:00:36.270 4131 AUDIT cinder.api.v1.volumes [req-6d007686-a7d7-4252-912a-0cb224dc148f 3701c870aea549039fdeb22a3ec36864 e77cc2a25f004ec099497d95f02f96dd] ...
        grok {
            match => ["message", "\[req-%{UUID:request_id} %{WORD:request_user_id} %{WORD:request_tenant_id}\] %{GREEDYDATA:message}"]
            add_tag => [ "cinder-request-id" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }
        #-----------------------------------------------------------------------
        # Parse & tag volume info from 'message' field in cinder-request-id
        if "cinder-request-id" in [tags] {
            grok {
                match => ["message", "vol=%{GREEDYDATA:vol}"]
                add_tag => [ "cinder-request-volume-info" ]
                break_on_match => false
                remove_field => ["message"] # overwrites original message with whats left
                tag_on_failure => []
            }
            if "cinder-request-volume-info" not in [tags] {
                grok {
                    match => ["message", "%{GREEDYDATA:message}"]
                    add_tag => [ "cinder-action" ]
                    break_on_match => false
                    overwrite => ["message"] # overwrites original message with whats left
                    tag_on_failure => []
                }
            }
        }
        #-----------------------------------------------------------------------
    }
    #---------------------------------------------------------------------------
}
#===============================================================================
