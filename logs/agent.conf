#===============================================================================
input {
    file {
        type => "nova"
        start_position => "beginning"
        sincedb_path => "/dev/null"
        path => [
                 "/var/log/nova/nova-api-os-compute.log",
                 "/var/log/nova/nova-cert.log",
                 "/var/log/nova/nova-compute.log",
                 "/var/log/nova/nova-consoleauth.log",
                 "/var/log/nova/nova-conductor.log",
                 "/var/log/nova/nova-dhcpbridge.log",
                 "/var/log/nova/nova-manage.log",
                 "/var/log/nova/nova-network.log",
                 "/var/log/nova/nova-scheduler.log"
                  ]
    }
    file {
        type => "keystone"
        start_position => "beginning"
        sincedb_path => "/dev/null"
        path => [
                 "/var/log/keystone/keystone.log"
                  ]
    }
}
#-------------------------------------------------------------------------------
filter {
    #---------------------------------------------------------------------------
    # Parse date formats
    date {
        match => [ 
            "yyyy-MM-dd HH:mm:ss.SSSZ", 
            "dd-MMM-YYYY::HH:mm:ss", 
            "yyyy-MM-dd HH:mm:ss,SSS",
            "yyyy-MM-dd HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss",
            "EEE MMM DD HH:mm:ss YYYY",
            "dd/MMM/yyyy:HH:mm:ss Z",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        ]
    }
    #---------------------------------------------------------------------------
    # Parse & tag generic openstack log message
    grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{POSINT:nova_pid} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}" }
        add_tag => [ "openstack-generic" ]
        break_on_match => false
        tag_on_failure => []
    }
    #---------------------------------------------------------------------------
    # Parse & tag multiline logs where subsequent lines are added to the original, previous line
    multiline {
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }
    #---------------------------------------------------------------------------
    # Parse & tag specific openstack project log messages
    if "openstack-generic" in [tags] {

        # Parse & tag generic nova logs
        # i.e.:
        # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [-] (11093) accepted ('10.127.26.138', 53437)
        # 2) nova-compute.log: nova.compute.resource_tracker [-] Auditing locally available compute resources
        grok {
            match => ["program", "nova.%{GREEDYDATA:program_path}"]
            add_tag => [ "nova-generic" ]
            break_on_match => false
            tag_on_failure => []
        }

        # Parse & tag generic keystoneclient logs (as used by nova)
        # i.e.:
        # 1) nova-api-os-compute.log: keystoneclient.middleware.auth_token [-] Using /tmp/keystone-signing-FI3PTe as cache directory for signing certificate
        grok {
            match => ["program", "keystoneclient.%{GREEDYDATA:program_path}"]
            add_tag => [ "keystoneclient-generic" ]
            break_on_match => false
            tag_on_failure => []
        }

        # Parse & tag generic keystone logs
        # i.e.:
        # 1) keystone.log: keystone.common.controller [-] RBAC: Bypassing authorization
        # 2) keystone.log: keystone-all [-] Configuration options gathered from: log_opt_values /usr/lib/python2.7/dist-packages/oslo/config/cfg.py:1929
        grok {
            match => ["program", "keystone[.-]%{GREEDYDATA:program_path}"]
            add_tag => [ "keystone-generic" ]
            break_on_match => false
            tag_on_failure => []
        }

        # Parse & tag generic routes logs (as used by keystone & nova)
        # i.e.:
        # 1) keystone.log: routes.middleware [-] Initialized with method overriding = True, and path info altering = True __init__ /usr/lib/python2.7/dist-packages/routes/middleware.py:41
        # 2) keystone.log: routes.middleware [-] Matched GET /tenants __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        grok {
            match => ["program", "routes[.-]%{GREEDYDATA:program_path}"]
            add_tag => [ "routes-generic" ]
            break_on_match => false
            tag_on_failure => []
        }
    }
    #---------------------------------------------------------------------------
    # Parse & tag nova logs
    if "nova-generic" in [tags] {

        # Parse & tag nova request-id's
        # i.e.:
        # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-264fe290-42c6-4252-9a87-c20685d360f1 23101739b41842babf322615686cdbf9 d6a76ef3d2a54fbbbdcf7694e4900c5d] 10.127.26.138 "GET /v2/d6a76ef3d2a54fbbbdcf7694e4900c5d/flavors/detail HTTP/1.1" status: 200 len: 2273 time: 0.1098659
        grok {
            match => ["message", "\[req-%{UUID:request_id} %{WORD:uuid1} %{WORD:uuid2}\] %{GREEDYDATA:message}"]
            add_tag => [ "nova-request-id" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }

        # Parse & tag nova HTTP GET requests
        # i.e.:
        # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-264fe290-42c6-4252-9a87-c20685d360f1 23101739b41842babf322615686cdbf9 d6a76ef3d2a54fbbbdcf7694e4900c5d] 10.127.26.138 "GET /v2/d6a76ef3d2a54fbbbdcf7694e4900c5d/flavors/detail HTTP/1.1" status: 200 len: 2273 time: 0.1098659
        grok {
            match => [
                "message", "GET (/v%{NUMBER:api_version})?/%{WORD:tenant_id}/%{DATA:api_func}(/%{DATA:api_func_path})? %{GREEDYDATA:message}"
                ]
            add_tag => [ "nova-get-request" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }

        # Parse & tag nova HTTP POST requests
        # i.e.:
        # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-1020ef31-7c3f-4ae9-a156-d04cbff43026 44aecbd3d6e34b90a8c2028c5352175b e8ca4ebd592b4e20861c5a06813d3c78] 10.127.26.138 "POST /v2/e8ca4ebd592b4e20861c5a06813d3c78/servers HTTP/1.1" status: 202 len: 739 time: 0.6813190
        grok {
            match => [
                "message", "POST (/v%{NUMBER:api_version})?/%{WORD:tenant_id}/%{DATA:api_func}(/%{DATA:api_func_path})? %{GREEDYDATA:message}" 
                ]
            add_tag => [ "nova-post-request" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }

        if "nova-get-request" in [tags] or "nova-post-request" in [tags] {

            # Parse & tag nova HTTP info from GET & POST requests
            # i.e.:
            # 1) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-264fe290-42c6-4252-9a87-c20685d360f1 23101739b41842babf322615686cdbf9 d6a76ef3d2a54fbbbdcf7694e4900c5d] 10.127.26.138 "GET /v2/d6a76ef3d2a54fbbbdcf7694e4900c5d/flavors/detail HTTP/1.1" status: 200 len: 2273 time: 0.1098659
            # 2) nova-api-os-compute.log: nova.osapi_compute.wsgi.server [req-1020ef31-7c3f-4ae9-a156-d04cbff43026 44aecbd3d6e34b90a8c2028c5352175b e8ca4ebd592b4e20861c5a06813d3c78] 10.127.26.138 "POST /v2/e8ca4ebd592b4e20861c5a06813d3c78/servers HTTP/1.1" status: 202 len: 739 time: 0.6813190
            grok {
                match => [
                    "message", 'HTTP/%{NUMBER:http_req_version}\" status: %{NUMBER:http_req_response} len: %{NUMBER:http_req_length} time: %{NUMBER:http_req_time}' 
                    ]
                add_tag => [ "http-request" ]
                remove_field => ["message"]
                break_on_match => false
                tag_on_failure => []
            }
        }
    }
    #---------------------------------------------------------------------------
    # Parse & tag routes logs (as used by keystone & nova)
    if "routes-generic" in [tags] {

        #-----------------------------------------------------------------------
        # Parse & tag routes GET requests
       
        # Generic GET requests i.e.:
        # 1) keystone.log: Matched GET /tenants __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        # 2) keystone.log: Matched GET /users __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        # 3) keystone.log: Matched GET /tenants/47942f2dc60d4b88804b8573c0e78d7e/users __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        # 4) keystone.log: Matched GET /tenants/47942f2dc60d4b88804b8573c0e78d7e/users/29f569a2066745659b4fb080ff3b5a67/roles # __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        # 5) keystone.log: Matched GET /users/965fbe7ab90d4b1b912f85d4eb34d1cd/credentials/OS-EC2 __call__ # # /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        grok {
            match => [
                "message", "GET /%{DATA:api_func}(/%{DATA:api_func_path})? %{GREEDYDATA:message}"
                ]
            add_tag => [ "routes-get-request" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }
        
        if "routes-get-request" in [tags] {

            # Tenants GET requests i.e.:
            # 1) keystone.log: Matched GET /tenants/47942f2dc60d4b88804b8573c0e78d7e/users __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
            # 2) keystone.log: Matched GET /tenants/47942f2dc60d4b88804b8573c0e78d7e/users/29f569a2066745659b4fb080ff3b5a67/roles # __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
            if [api_func] == "tenants" {
                grok {
                    match => [
                        "api_func_path", "%{WORD:tenant_id}/%{WORD:tenant_func}(/%{WORD:user_id}/%{WORD:user_func})?"
                        ]
                        add_tag => [ "routes-tenants-get-request" ]
                        break_on_match => false
                        remove_field => ["api_func_path"]
                        tag_on_failure => []
                }
            }

            # Users GET requests i.e.:
            # 1) Matched GET /users/965fbe7ab90d4b1b912f85d4eb34d1cd/credentials/OS-EC2 __call__ # # /usr/lib/python2.7/dist-packages/routes/middleware.py:100
            if [api_func] == "users" {
                grok {
                    match => [
                        "api_func_path", "%{WORD:user_id}/%{WORD:user_func}(/%{PROG:user_func_detail})?"
                        ]
                        add_tag => [ "routes-users-get-request" ]
                        break_on_match => false
                        remove_field => ["api_func_path"]
                        tag_on_failure => []
                }
            }
        }

        #-----------------------------------------------------------------------
        # Parse & tag routes POST requests

        # Generic POSTS requests i.e.:
        # 1) Matched POST /tokens __call__ /usr/lib/python2.7/dist-packages/routes/middleware.py:100
        grok {
            match => [
                "message", "POST /%{DATA:api_func} %{GREEDYDATA:message}"
                ]
            add_tag => [ "routes-post-request" ]
            break_on_match => false
            overwrite => ["message"] # overwrites original message with whats left
            tag_on_failure => []
        }

        #-----------------------------------------------------------------------
    }
    #---------------------------------------------------------------------------
#-------------------------------------------------------------------------------
}
#-------------------------------------------------------------------------------
output {
    elasticsearch { host => localhost }
}
#===============================================================================
